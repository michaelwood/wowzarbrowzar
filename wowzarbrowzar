#!/usr/bin/env python3
# Will actually work with either python 2.7 or 3
# wowzarbrowzar - Michael Wood - GPLv3
# Basic browser chooser
import gi
import argparse
import sys
import subprocess
import json
gi.require_version('Gtk', '3.0')
from gi.repository import Gtk # noqa (we have to set version first)
from gi.repository import Gio # noqa
from gi.repository import GLib # noqa

# Default config

BROWSERS = [
    # Epected keys
    # { 'name' : 'browsername',
    #   'command' : 'command-to-launch-browser'
    # }
    # optional 'icon' : 'icon-name'

    {'name': "Chromium",
     'command': "chromium-browser",
     'icon': 'chromium-browser'},

    {'name': "Firefox",
     'command': "firefox",
     'icon': 'firefox'},
]

config_file_path = GLib.get_user_config_dir() + "/wowzarbrowzar.json"


class MainWindow(Gtk.Window):

    def __init__(self, args):
        self.args = args

        Gtk.Window.__init__(self, title="Open with...")

        self.set_position(Gtk.WindowPosition.CENTER_ALWAYS)
        self.set_decorated(False)

        self.box = Gtk.Box(spacing=6)
        self.add(self.box)

        try:
            with open(config_file_path, 'r') as config:
                BROWSERS = json.loads(config.read())
        except FileNotFoundError:
            pass

        # for browser in browsers:
        for browser in BROWSERS:

            if browser.get('icon'):
                button = Gtk.Button.new_from_icon_name(browser['icon'],
                                                       Gtk.IconSize.DIALOG)
            else:
                button = Gtk.Button(label=browser['name'])

            button.connect("clicked", self.launch_browser,
                           browser['command'])
            self.box.pack_start(button, True, True, 0)

    def launch_browser(self, widget, command):
        subprocess.Popen([command, self.args.url],
                         cwd="/",
                         stdout=subprocess.PIPE,
                         stderr=subprocess.STDOUT)
        sys.exit()


def set_as_default_browser():
    # Try to find ourselves in the db
    me = Gio.DesktopAppInfo.new("wowzarbrowzar.desktop")
    if not me:
        print("Failed it look like I'm properly installed, "
              " check the .desktop file is installed correctly")
        return

    current_app = Gio.AppInfo.get_default_for_uri_scheme("http")

    for content_type in current_app.get_supported_types():
        if me.set_as_default_for_type(content_type):
            print("Successfully set me as default for %s" % content_type)


def configure_browsers():
    print("Scanning for all installed applications which handle websites...")
    avail_browsers = Gio.app_info_get_recommended_for_type("text/html")
    use = []
    print("Done!")

    print("Select the applications to add to the switcher")
    for browser in avail_browsers:
        # Don't add ourselves as an option!
        if "Wowzarbrowzar" in browser.get_display_name():
            continue

        a = input("  Add '%s' (yes/no/done/quit) y/n/d/q?: " %
                  browser.get_display_name())

        if "q" in a:
            return

        if "y" in a or "Y" in a:
            browser_config = {
                'name': browser.get_display_name(),
                'command': browser.get_executable()
            }

            icon = browser.get_icon()
            if type(icon) is Gio.ThemedIcon:
                browser_config['icon'] = icon.get_names()[0]
            elif type(icon) is Gio.FileIcon:
                browser_config['icon'] = icon.props.file.get_path()

            use.append(browser_config)

        if "d" in a or "D" in a:
            break

    with open(config_file_path, 'w+') as config:
        config.write(json.dumps(use))


def main():
    parser = argparse.ArgumentParser()

    parser.add_argument("--set-as-default-browser",
                        help="Sets this script as the default browser",
                        dest="set_default",
                        action="store_true")

    parser.add_argument(
        "--configure-browsers",
        help="Configure the browsers/applications to have as switcher options",
        dest="configure_browsers",
        action="store_true")

    parser.add_argument("url", help="The url to open", nargs="?",
                        default="about:blank")

    args = parser.parse_args()

    if args.set_default:
        set_as_default_browser()
        sys.exit()

    if args.configure_browsers:
        configure_browsers()
        sys.exit()

    win = MainWindow(args)
    win.connect("destroy", Gtk.main_quit)
    win.show_all()
    Gtk.main()


if __name__ == '__main__':
    sys.exit(main())
